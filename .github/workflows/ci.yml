name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [17, 21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run integration tests
      run: ./gradlew test --tests BasicIntegrationTest --info
      
    - name: Run all tests
      run: ./gradlew test --info --continue
      continue-on-error: true
      
    - name: Generate test report
      run: ./gradlew jacocoTestReport
      if: matrix.java-version == '17'
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-java-${{ matrix.java-version }}
        path: |
          build/reports/tests/
          build/test-results/
          
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.java-version == '17'
      with:
        name: coverage-report
        path: build/reports/jacoco/
        
    - name: Build fat JAR
      run: ./gradlew fatJar
      
    - name: Test JAR functionality
      run: |
        cd test-project
        java -jar ../build/libs/kotlin-metrics-all-1.0.0.jar > output.txt 2>&1
        cat output.txt
        # Verify key outputs exist
        grep -q "Classes analyzed:" output.txt
        grep -q "Average LCOM:" output.txt
        grep -q "Average Complexity:" output.txt
        # Verify HTML report was generated
        [ -f kotlin-metrics-report.html ]
        echo "✅ JAR functionality test passed"
        
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      if: matrix.java-version == '17'
      with:
        name: kotlin-metrics-jar
        path: build/libs/kotlin-metrics-all-*.jar

  code-quality:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run self-analysis with kotlin-metrics
      run: |
        echo "🔍 Building kotlin-metrics..."
        ./gradlew fatJar
        
        echo "📊 Running self-analysis..."
        java -jar build/libs/kotlin-metrics-all-1.0.0.jar > self-analysis.txt 2>&1
        
        echo "📋 Self-analysis results:"
        cat self-analysis.txt
        
        # Extract key metrics
        CLASSES=$(grep "Classes analyzed:" self-analysis.txt | grep -o '[0-9]\+' | head -1)
        LCOM=$(grep "Average LCOM:" self-analysis.txt | grep -o '[0-9]\+\.[0-9]\+' | head -1)
        COMPLEXITY=$(grep "Average Complexity:" self-analysis.txt | grep -o '[0-9]\+\.[0-9]\+' | head -1)
        
        echo "📈 Metrics Summary:"
        echo "Classes: $CLASSES"
        echo "Average LCOM: $LCOM"
        echo "Average Complexity: $COMPLEXITY"
        
        # Verify HTML report exists
        [ -f kotlin-metrics-report.html ] && echo "✅ HTML report generated"
        
        # Save as artifact
        cp self-analysis.txt self-analysis-report.txt
        
    - name: Upload self-analysis results
      uses: actions/upload-artifact@v4
      with:
        name: self-analysis-report
        path: |
          self-analysis-report.txt
          kotlin-metrics-report.html

  compatibility-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build JAR
      run: ./gradlew fatJar
      
    - name: Test with Kotlin-only project
      run: |
        echo "🧪 Testing Kotlin-only project..."
        mkdir -p test-kotlin-only/src/main/kotlin
        cat > test-kotlin-only/src/main/kotlin/Sample.kt << 'EOF'
        class Sample {
            private val name: String = ""
            private val age: Int = 0
            
            fun getName(): String = name
            fun getAge(): Int = age
        }
        EOF
        
        cd test-kotlin-only
        java -jar ../build/libs/kotlin-metrics-all-1.0.0.jar > kotlin-only.txt 2>&1
        cat kotlin-only.txt
        grep -q "Classes analyzed: 1" kotlin-only.txt
        echo "✅ Kotlin-only test passed"
        
    - name: Test with Java-only project
      run: |
        echo "🧪 Testing Java-only project..."
        mkdir -p test-java-only/src/main/java
        cat > test-java-only/src/main/java/Sample.java << 'EOF'
        public class Sample {
            private String name = "";
            private int age = 0;
            
            public String getName() { return name; }
            public int getAge() { return age; }
        }
        EOF
        
        cd test-java-only
        java -jar ../build/libs/kotlin-metrics-all-1.0.0.jar > java-only.txt 2>&1
        cat java-only.txt
        grep -q "Classes analyzed: 1" java-only.txt
        echo "✅ Java-only test passed"
        
    - name: Test with mixed project
      run: |
        echo "🧪 Testing mixed Kotlin/Java project..."
        cd test-project
        java -jar ../build/libs/kotlin-metrics-all-1.0.0.jar > mixed.txt 2>&1
        cat mixed.txt
        grep -q "Found.*Kotlin files and.*Java files" mixed.txt
        grep -q "Classes analyzed:" mixed.txt
        echo "✅ Mixed project test passed"
        
    - name: Upload compatibility test results
      uses: actions/upload-artifact@v4
      with:
        name: compatibility-test-results
        path: |
          test-kotlin-only/kotlin-only.txt
          test-java-only/java-only.txt
          test-project/mixed.txt